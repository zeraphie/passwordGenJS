{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/passwordGen.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","PasswordGen","_classCallCheck","this","constructor","default_length","keyspace","generateKeyspace","value","arguments","undefined","parseInt","minimum_length","maximum_random_integer","console","log","sets","default_sets","arrayKeySearch","split","character_sets","set","_set","password","randomInteger","generatePassword","needles","haystack","item","min","max","crypto","window","msCrypto","byteArray","Uint8Array","getRandomValues","range","Math","floor","lowercase_letters","uppercase_letters","numbers","special_characters","w","whitespace"],"mappings":"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","file":"passwordGen.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","/**\r\n * Password generator class\r\n *\r\n * This is a JavaScript version of my PasswordGen PHP library accessible here:\r\n * https://github.com/zeraphie/passwordGen\r\n *\r\n * This does not rely on any outside libraries apart from the window.crypto\r\n * object, and has browser support for at least IE11+\r\n *\r\n * @license MIT\r\n * @version 1.0.2\r\n * @author Izzy Skye\r\n */\r\nexport default class PasswordGen {\r\n    /**\r\n     * Create a new PasswordGen instance and setting the default character\r\n     * groups to be used by this class\r\n     */\r\n    constructor(){\r\n        /*--------------------------------------\r\n         Setup of the length and keyspace\r\n         variables\r\n         --------------------------------------*/\r\n        this.length = this.constructor.default_length;\r\n        this.keyspace = '';\r\n        \r\n        /*--------------------------------------\r\n         Setup the keyspace\r\n         --------------------------------------*/\r\n        this.generateKeyspace();\r\n    }\r\n    \r\n    /**\r\n     * Getter for minimum_length class variable for the minimum length of\r\n     * the password generated\r\n     *\r\n     * @return {number} The minimum password length\r\n     */\r\n    static get minimum_length(){\r\n        return 8;\r\n    }\r\n    \r\n    /**\r\n     * Getter for maximum_random_integer class variable for the maximum limit of\r\n     * random integer\r\n     *\r\n     * @return {number} The maximum random integer\r\n     */\r\n    static get maximum_random_integer(){\r\n        return 256;\r\n    }\r\n    \r\n    /**\r\n     * Getter for default_length class variable used to generate the default\r\n     * password length\r\n     *\r\n     * @return {number} The default password length\r\n     */\r\n    static get default_length(){\r\n        return 16;\r\n    }\r\n    \r\n    /**\r\n     * Getter for default_sets class variable used to generate the keyspace\r\n     *\r\n     * @return {string} The default sets\r\n     */\r\n    static get default_sets(){\r\n        return 'luns';\r\n    }\r\n    \r\n    /**\r\n     * Getter for lowercase_letters set used in generating the keyspace\r\n     *\r\n     * @return {string} All lower case letters\r\n     */\r\n    static get lowercase_letters(){\r\n        return 'abcdefghijklmnopqrstuvwxyz';\r\n    }\r\n    \r\n    /**\r\n     * Getter for uppercase_letters set used in generating the keyspace\r\n     *\r\n     * @return {string} All upper case letters\r\n     */\r\n    static get uppercase_letters(){\r\n        return 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    }\r\n    \r\n    /**\r\n     * Getter for numbers set used in generating the keyspace\r\n     *\r\n     * @return {string} All single digits\r\n     */\r\n    static get numbers(){\r\n        return '1234567890';\r\n    }\r\n    \r\n    /**\r\n     * Getter for special_characters set used in generating the keyspace\r\n     *\r\n     * @return {string} All special characters used\r\n     */\r\n    static get special_characters(){\r\n        return '!@#$%&*?,./|[]{}()';\r\n    }\r\n    \r\n    /**\r\n     * Getter for whitespace set used in generating the keyspace\r\n     *\r\n     * @return {string} All whitespace characters used\r\n     */\r\n    static get whitespace(){\r\n        return ' ';\r\n    }\r\n    \r\n    /**\r\n     * Getter for whitespace set used in generating the keyspace\r\n     *\r\n     * @return {object} All whitespace characters used\r\n     */\r\n    static get character_sets(){\r\n        return {\r\n            'l': this.lowercase_letters,\r\n            'u': this.uppercase_letters,\r\n            'n': this.numbers,\r\n            's': this.special_characters,\r\n            'w': this.whitespace\r\n        };\r\n    }\r\n    \r\n    /**\r\n     * Test if any elements of an array exist as keys in another array\r\n     *\r\n     * @param needles {array} The needles to search for\r\n     * @param haystack {object} The haystack to search\r\n     * @returns {boolean} Whether any needles exist as keys in the haystack\r\n     */\r\n    static arrayKeySearch(needles, haystack){\r\n        let i = 0, length = needles.length;\r\n        \r\n        while(i < length){\r\n            for(let item in haystack){\r\n                if(needles[i] === item){\r\n                    return true;\r\n                }\r\n            }\r\n            \r\n            i++;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n    \r\n    /**\r\n     * Generate a cryptographically strong random number between two values\r\n     *\r\n     * @param min {number} The minimum number\r\n     * @param max {number} The maximum number\r\n     * @returns {number|*}\r\n     */\r\n    static randomInteger(min, max){\r\n        if(max < this.maximum_random_integer){\r\n            let crypto = window.crypto || window.msCrypto;\r\n            let byteArray = new Uint8Array(1);\r\n            crypto.getRandomValues(byteArray);\r\n            \r\n            let range = max - min + 1;\r\n            \r\n            if(\r\n                byteArray[0]\r\n                    >=\r\n                Math.floor(this.maximum_random_integer / range) * range\r\n            ){\r\n                return this.randomInteger(min, max);\r\n            }\r\n            \r\n            return min + (byteArray[0] % range);\r\n        } else {\r\n            throw `Sorry the maximum is too large\\n` +\r\n            `The maximum size is ${this.maximum_random_integer}\\n`;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * Set the length of the password, checking if it's an integer and\r\n     * higher than the minimum required length\r\n     *\r\n     * @param value {number} Length of the generated password\r\n     * @returns {PasswordGen} The current instance of PasswordGen\r\n     */\r\n    setLength(value = 0){\r\n        if(\r\n            value === parseInt(value)\r\n                &&\r\n            value >= this.constructor.minimum_length\r\n        ){\r\n            this.length = value;\r\n        }\r\n        \r\n        return this;\r\n    }\r\n    \r\n    /**\r\n     * Set the keyspace of the password generator, checking if it's set and not\r\n     * an empty string\r\n     *\r\n     * @param keyspace {string} The keyspace to be used by the generator\r\n     * @returns {PasswordGen} The current instance of PasswordGen\r\n     */\r\n    setKeyspace(keyspace = ''){\r\n        if(typeof keyspace === 'string' && keyspace !== ''){\r\n            if(keyspace.length < this.constructor.maximum_random_integer){\r\n                this.keyspace = keyspace;\r\n            } else {\r\n                console.log(`The keyspace is too long, falling back to default`);\r\n            }\r\n        }\r\n        \r\n        return this;\r\n    }\r\n    \r\n    /**\r\n     * Generate the keyspace of the password generator using the character\r\n     * groups\r\n     *\r\n     * @param sets {string} Sets to be used for the generator\r\n     * @returns {PasswordGen} The current instance of PasswordGen\r\n     */\r\n    generateKeyspace(sets = this.constructor.default_sets){\r\n        this.keyspace = '';\r\n        \r\n        /*--------------------------------------\r\n         Test if the sets variable is a string\r\n         and if any of the characters in it\r\n         are in the character_sets array's keys\r\n         --------------------------------------*/\r\n        if(\r\n            typeof sets === 'string'\r\n                &&\r\n            this.constructor.arrayKeySearch(\r\n                sets.split(''), this.constructor.character_sets\r\n            )\r\n        ){\r\n            /*--------------------------------------\r\n             Split the sets string on every\r\n             character and loop through them\r\n             --------------------------------------*/\r\n            for(let set in sets.split('')){\r\n                this.keyspace += this.constructor.character_sets[\r\n                    sets[set]\r\n                ];\r\n            }\r\n        } else {\r\n            for(let set in this.constructor.default_sets.split('')){\r\n                this.keyspace += this.constructor.character_sets[\r\n                    this.constructor.default_sets[set]\r\n                ];\r\n            }\r\n        }\r\n        \r\n        if(this.keyspace.length > this.constructor.maximum_random_integer){\r\n            console.log(`The keyspace is too long, falling back to default`);\r\n            this.generateKeyspace();\r\n        }\r\n        \r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Generate the password by selecting a random character from\r\n     * the keyspace generated\r\n     *\r\n     * @returns {string} The generated password\r\n     */\r\n    generatePassword(){\r\n        let password = '';\r\n        \r\n        for(let i = 0; i < this.length; i++){\r\n            password += this.keyspace.split('')[\r\n                this.constructor.randomInteger(0, this.keyspace.length - 1)\r\n            ];\r\n        }\r\n        \r\n        return password;\r\n    }\r\n    \r\n    /**\r\n     * The generated password - New one each time this is accessed\r\n     *\r\n     * @returns {string}\r\n     */\r\n    get password(){\r\n        return this.generatePassword();\r\n    }\r\n}\r\n"]}